---

- name: Install certbot
  apt:
    state: present
    default_release: stretch-backports
    name:
      - certbot
      - python-certbot-nginx

- name: Create ssl dhparam
  command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096
  args:
    creates: /etc/ssl/certs/dhparam.pem

- name: check if certificate exist
  stat:
    path: '/etc/letsencrypt/live/{{ item }}'
  with_items: '{{ domains }}'
  register: st

- name: check if nginx is running
  stat:
    path: /var/run/nginx.pid
  register: ng

- name: create a new certificate
  shell: 'certbot certonly --cert-name {{ item.item }} -n --agree-tos -d {{ item.item }} -m admin@meltygroup.com {{ ng.stat.exists | ternary("--nginx", "--standalone") }} --rsa-key-size 4096'
  with_items: '{{ st.results }}'
  when: not item.stat.exists
  loop_control:
    label: "{{ item.item }}"

- name: Create letsencrypt snippets
  template:
    src: letsencrypt.conf.j2
    dest: '/etc/nginx/snippets/letsencrypt-{{ item.item }}.conf'
  with_items: '{{ st.results }}'
  loop_control:
    label: "{{ item.item }}"

- name: Choose installer-nginx for the cron to work properly
  lineinfile:
    path: "/etc/letsencrypt/renewal/{{ item }}.conf"
    state: present
    regexp: '^installer ='
    line: 'installer = nginx'
  with_items: '{{ domains }}'

- name: Choose installer-nginx for the cron to work properly
  lineinfile:
    path: "/etc/letsencrypt/renewal/{{ item }}.conf"
    state: present
    regexp: '^authenticator ='
    line: 'authenticator = nginx'
  with_items: '{{ domains }}'
